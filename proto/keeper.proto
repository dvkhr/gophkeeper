// proto/keeper.proto

syntax = "proto3";

package keeper;

option go_package = "github.com/dvkhr/gophkeeper/pb";

service KeeperService {
  rpc Register (RegisterRequest) returns (AuthResponse);
  //rpc Register (RegisterRequest) returns (RegisterResponse);
  rpc Login (LoginRequest) returns (AuthResponse);
  //rpc Login (LoginRequest) returns (LoginResponse);
  rpc SyncData (SyncRequest) returns (SyncResponse);
  rpc GetData (GetDataRequest) returns (DataResponse);
  rpc StoreData (StoreDataRequest) returns (StatusResponse);
}

message RegisterRequest {
  string login = 1;
  bytes encrypted_password = 2;
}

message LoginRequest {
  string login = 1;
  bytes encrypted_password = 2;
}

message AuthResponse {
  string access_token = 1;
  string refresh_token = 2;
}

/*// Объект, который отправляется при вызове RPC-метода (ручки) Register.
message RegisterRequest {
  string email = 1; // Email of the user to register.
  string password = 2; // Password of the user to register.
}

// Объект, который метод (ручка) вернёт.
message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

// То же самое для метода Login()
message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
  int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
  string token = 1; // Auth token of the logged in user.
}*/

message DataRecord {
  string id = 1;
  string type = 2; // loginpass, text, binary, card, otp
  bytes encrypted_data = 3;
  map<string, string> metadata = 4;
  int64 timestamp = 5;
}

message SyncRequest {
  repeated DataRecord records = 1;
}

message SyncResponse {
  repeated DataRecord records = 1;
}

message GetDataRequest {
  string type = 1;
}

message DataResponse {
  repeated DataRecord records = 1;
}

message StoreDataRequest {
  DataRecord record = 1;
}

message StatusResponse {
  bool success = 1;
  string message = 2;
}